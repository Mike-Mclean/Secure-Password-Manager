openapi: 3.0.3
info:
  title: Secure Password Manager API
  version: 1.0.0
  description: A secure password manager API with session authentication.
paths:
  /api/accounts/check-user/:
    get:
      operationId: accounts_check_user_retrieve
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/credentials-login/:
    post:
      operationId: accounts_credentials_login_create
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/csrf/:
    get:
      operationId: accounts_csrf_retrieve
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/login/:
    post:
      operationId: accounts_login_create
      description: |-
        Django's session framework automatically handles:
        - Secure session ID generation
        - Session expiration
        - Session rotation on authentication state changes
        - HttpOnly cookies (when using cookie sessions)
        - Secure flag for HTTPS
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/logout/:
    post:
      operationId: accounts_logout_create
      description: as long as the sessionid cookie is set in the request, this will
        log the user out
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/register/:
    post:
      operationId: accounts_register_create
      tags:
      - accounts
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/vault/history/:
    get:
      operationId: vault_history_list
      description: ViewSet for viewing vault item history (read-only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVaultItemHistoryList'
          description: ''
  /api/vault/history/{id}/:
    get:
      operationId: vault_history_retrieve
      description: ViewSet for viewing vault item history (read-only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemHistory'
          description: ''
  /api/vault/items/:
    get:
      operationId: vault_items_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVaultItemListList'
          description: ''
    post:
      operationId: vault_items_create
      tags:
      - vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaultItemList'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
  /api/vault/items/{id}/:
    get:
      operationId: vault_items_retrieve
      description: Track access when retrieving a single item.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
    put:
      operationId: vault_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaultItemList'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
    patch:
      operationId: vault_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVaultItemList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVaultItemList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVaultItemList'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
    delete:
      operationId: vault_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/vault/items/{id}/restore/:
    post:
      operationId: vault_items_restore_create
      description: Restore a soft-deleted vault item.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaultItemList'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
  /api/vault/items/{id}/soft_delete/:
    post:
      operationId: vault_items_soft_delete_create
      description: Soft delete a vault item.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaultItemList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaultItemList'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
  /api/vault/items/deleted/:
    get:
      operationId: vault_items_deleted_retrieve
      description: Get soft-deleted items.
      tags:
      - vault
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemList'
          description: ''
components:
  schemas:
    ItemTypeEnum:
      enum:
      - password
      - note
      - other
      type: string
      description: |-
        * `password` - Password
        * `note` - Secure Note
        * `other` - Other
    PaginatedVaultItemHistoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VaultItemHistory'
    PaginatedVaultItemListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VaultItemList'
    PatchedVaultItemList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          description: Descriptive title for the vault item
          maxLength: 255
        item_type:
          $ref: '#/components/schemas/ItemTypeEnum'
        description:
          type: string
          description: Optional description for the vault item
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: When the item was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: When the item was last updated
        last_accessed:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: When the item was last accessed
        soft_deleted:
          type: boolean
          description: Soft delete flag
        is_expired:
          type: string
          readOnly: true
    User:
      type: object
      description: Serializer for Django User with minimal fields.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_joined
      - email
      - id
      - username
    VaultItemHistory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        vault_item:
          type: string
          format: uuid
        vault_item_title:
          type: string
          readOnly: true
        user_info:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        action:
          type: string
          description: Action performed on the item
          maxLength: 50
        details:
          nullable: true
          description: Additional details about the action
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - id
      - timestamp
      - user_info
      - vault_item
      - vault_item_title
    VaultItemList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          description: Descriptive title for the vault item
          maxLength: 255
        item_type:
          $ref: '#/components/schemas/ItemTypeEnum'
        description:
          type: string
          description: Optional description for the vault item
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: When the item was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: When the item was last updated
        last_accessed:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: When the item was last accessed
        soft_deleted:
          type: boolean
          description: Soft delete flag
        is_expired:
          type: string
          readOnly: true
      required:
      - created_at
      - id
      - is_expired
      - last_accessed
      - title
      - updated_at
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid

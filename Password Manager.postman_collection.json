{
	"info": {
		"_postman_id": "f378236f-fcc7-480e-8c15-172c2c0048c9",
		"name": "Password Manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18169902",
		"_collection_link": "https://osu-password-manager-project.postman.co/workspace/OSU-Password-Manager-Project-Wo~3cbbfe8d-392b-4f04-8b31-58e2ec684bf9/collection/18169902-f378236f-fcc7-480e-8c15-172c2c0048c9?action=share&source=collection_link&creator=18169902"
	},
	"item": [
		{
			"name": "get CSRF cookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"csrf_token = pm.response.json()[\"csrftoken\"]",
							"console.log(\"CSRF Token\", csrf_token)",
							"pm.collectionVariables.set('csrftoken', csrf_token)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/accounts/csrf/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"csrf",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "check user exists before registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"random email should not be registered\", function () {",
							"    status = pm.response.status",
							"    pm.expect(pm.response.status).to.eql(\"OK\")",
							"    pm.expect(pm.response.json().available).to.eql(true)",
							"})",
							"",
							"pm.collectionVariables.set(\"test_email\", pm.collectionVariables.get(\"random_mailinator_email\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"random_mailinator_email\", uuid.v4()+\"@mailinator.com\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "sessionid",
						"value": "{{sessionid}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{random_mailinator_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/check-user/?q={{random_mailinator_email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"check-user",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "{{random_mailinator_email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"new_email = pm.response.json().email",
							"pm.collectionVariables.set('test_email', new_email)",
							"new_username = pm.response.json().username",
							"pm.collectionVariables.set('test_username', new_username)",
							"pm.collectionVariables.set('csrftoken', pm.cookies.get('csrftoken'))",
							"console.log(pm.response.json())",
							"pm.test(\"random email user should get created\", function () {",
							"   pm.response.to.have.status(201);",
							"",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "sessionid",
						"value": "{{sessionid}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "check user exists after registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"random email user should get created and be visible by check-user\", function () {",
							"   pm.expect(pm.response).to.have.status(200);",
							"   available = pm.response.json().available;",
							"   pm.expect(available).to.eql(false);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "sessionid",
						"value": "{{sessionid}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/check-user/?q={{test_email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"check-user",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "{{test_email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get users vault items fails if not logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/vault/items/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "userinfo lookup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"random email should not be registered\", function () {",
							"    status = pm.response.status",
							"    pm.expect(pm.response.status).to.eql(\"OK\")",
							"    pm.expect(pm.response.json().available).to.eql(true)",
							"})",
							"",
							"pm.collectionVariables.set(\"test_email\", pm.collectionVariables.get(\"random_mailinator_email\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');",
							"pm.collectionVariables.set(\"random_mailinator_email\", uuid.v4()+\"@mailinator.com\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "sessionid",
						"value": "{{sessionid}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{random_mailinator_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/check-user/?q={{random_mailinator_email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"check-user",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "{{random_mailinator_email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login with credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"sessionid = pm.response.json().sessionid",
							"csrftoken = pm.cookies.get('csrftoken')",
							"pm.collectionVariables.set(\"sessionid\",sessionid)",
							"pm.cookies.add(\"sesisonid\", sessionid)",
							"pm.collectionVariables.set(\"csrftoken\",csrftoken)",
							"pm.cookies.add(\"csrftoken\", csrftoken)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/credentials-login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"credentials-login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "session login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"let csrftoken = pm.cookies.get(\"csrftoken\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('csrftoken', csrftoken)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"password\":\"{{test_password}}\",\n    \"email\":\"{{test_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "change password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "old_password",
							"value": "{{test_password}}",
							"type": "text"
						},
						{
							"key": "new_password",
							"value": "{{new_test_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/change-password/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"change-password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "session login with new password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"let csrftoken = pm.cookies.get(\"csrftoken\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('csrftoken', csrftoken)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{random_mailinator_email}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "password",
							"value": "{{new_test_password}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{random_mailinator_email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "start reset password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"//pm.test(\"sessionid Cookie is set on login\", function () {",
							"//    pm.expect(sessionid).to.not.be.null",
							"//    pm.expect(sessionid).to.not.be.undefined",
							"//} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{random_mailinator_email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/start-reset-password/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"start-reset-password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm the token is valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"res = pm.response.json()",
							"pm.test(\"response says token valid\", function () {",
							"  pm.expect(res.detail).to.include(\"is valid\")",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/confirm-reset-password-token/?uid=MjI&token=ctaobs-8878022797d8eaedbb807070b0371230",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"confirm-reset-password-token",
						""
					],
					"query": [
						{
							"key": "uid",
							"value": "MjI"
						},
						{
							"key": "token",
							"value": "ctaobs-8878022797d8eaedbb807070b0371230"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm/complete token reset password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\":\"ctaobs-8878022797d8eaedbb807070b0371230\",\n    \"uid\":\"MjI\",\n    \"new_password\":\"<new password>\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/confirm-reset-password/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"confirm-reset-password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "start email mfa enrollment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('mfa_enroll_uid', pm.response.json().uid)",
							"pm.collectionVariables.set('mfa_enroll_token', pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{random_mailinator_email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/email/enroll/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"email",
						"enroll",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm/complete email mfa enrollment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "token",
							"value": "ctaobs-8878022797d8eaedbb807070b0371230",
							"type": "text"
						},
						{
							"key": "uid",
							"value": "MjI",
							"type": "text"
						},
						{
							"key": "new_password",
							"value": "P@SSWORD%23%23%23333",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/email/verify/?uid={{mfa_enroll_uid}}&token={{mfa_enroll_token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"email",
						"verify",
						""
					],
					"query": [
						{
							"key": "uid",
							"value": "{{mfa_enroll_uid}}"
						},
						{
							"key": "token",
							"value": "{{mfa_enroll_token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "start mfa SMS enrollment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('mfa_enroll_uid', pm.response.json().uid)",
							"pm.collectionVariables.set('mfa_enroll_token', pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "sms_number",
							"value": "+14436435424",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/sms/enroll/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"sms",
						"enroll",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm/complete mfa enrollment Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "token",
							"value": "ctaobs-8878022797d8eaedbb807070b0371230",
							"type": "text"
						},
						{
							"key": "uid",
							"value": "MjI",
							"type": "text"
						},
						{
							"key": "new_password",
							"value": "P@SSWORD%23%23%23333",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/email/verify/?uid={{mfa_enroll_uid}}&token={{mfa_enroll_token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"email",
						"verify",
						""
					],
					"query": [
						{
							"key": "uid",
							"value": "{{mfa_enroll_uid}}"
						},
						{
							"key": "token",
							"value": "{{mfa_enroll_token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "start mfa TOTP enrollment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('mfa_enroll_uid', pm.response.json().uid)",
							"pm.collectionVariables.set('mfa_enroll_token', pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/totp/enroll/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"totp",
						"enroll",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm/complete TOTP  mfa enrollment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "otp",
							"value": "{{generated_otp}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/totp/verify/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"totp",
						"verify",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get users vault items fails if not mfa'd and enrolled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"  pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/vault/items/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "start mfa challenge",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.collectionVariables.set('mfa_challenge_code', pm.response.json().code)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "mfa_type",
							"value": "email",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/challenge/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"challenge",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "verify mfa code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is set on login\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )",
							"",
							"pm.collectionVariables.set('mfa_enroll_uid', pm.response.json().uid)",
							"pm.collectionVariables.set('mfa_enroll_token', pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "code",
							"value": "{{mfa_challenge_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/mfa/verify/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"mfa",
						"verify",
						""
					],
					"query": [
						{
							"key": "code",
							"value": "{{mfa_challenge_code}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create vault",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"id = pm.response.json().id",
							"console.log(id)",
							"pm.collectionVariables.set('vault_id', pm.response.json().id)",
							"",
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"vaultid = pm.response.json().id",
							"pm.test(\"vault id returned\", function () {",
							"    pm.expect(sessionid).to.not.be.null",
							"    pm.expect(sessionid).to.not.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"encrypted_data\":\"{{encrypted_item}}\",\n    \"title\":\"test vault item\",\n    \"encryption_algorithm\":\"aes-256-gcm\",\n    \"item_type\":\"password\",\n    \"description\":\"a test item\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/vault/items/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get users vault items",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/vault/items/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get users vault history",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/vault/items/history/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						"history",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get individual vaul item  vault history",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/vault/items/?id={{vault_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"vault",
						"items",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{vault_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "session logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let sessionid = pm.cookies.get(\"sessionid\")",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"sessionid Cookie is removed on login\", function () {",
							"    pm.expect(sessionid).to.be.undefined",
							"} )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "P@SSword123#",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/accounts/logout/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"accounts",
						"logout",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "openid email profile write:vaults write:passwords read:vaults read:passwords",
				"type": "string"
			},
			{
				"key": "authRequestParams",
				"value": [
					{
						"key": "audience",
						"value": "{{password_vault_api_audience}}",
						"enabled": true,
						"send_as": "request_url"
					}
				],
				"type": "any"
			},
			{
				"key": "redirect_uri",
				"value": "http://localhost:8000/auth/callback",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://{{auth_domain}}/authorize",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{password_manager_client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{password_manager_client_id}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code_with_pkce",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://{{auth_domain}}/oauth/token",
				"type": "string"
			},
			{
				"key": "tokenRequestParams",
				"value": [
					{
						"key": "audience",
						"value": "{{password_vault_api_audience}}",
						"enabled": true,
						"send_as": "request_body"
					}
				],
				"type": "any"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sessionid",
			"value": "",
			"type": "string"
		},
		{
			"key": "csrftoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "",
			"type": "default"
		},
		{
			"key": "test_username",
			"value": ""
		},
		{
			"key": "encrypted_item",
			"value": ""
		},
		{
			"key": "vault_id",
			"value": ""
		},
		{
			"key": "new_test_password",
			"value": "P@SSWORD!@#123",
			"type": "default"
		},
		{
			"key": "random_mailinator_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "mfa_enroll_uid",
			"value": ""
		},
		{
			"key": "mfa_enroll_token",
			"value": ""
		},
		{
			"key": "mfa_challenge_code",
			"value": ""
		}
	]
}